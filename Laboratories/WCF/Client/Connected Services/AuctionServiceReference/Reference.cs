//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuctionServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Exponat", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
    public partial class Exponat : object
    {
        
        private int HighestBidderIdField;
        
        private int IdField;
        
        private string NameField;
        
        private double PriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HighestBidderId
        {
            get
            {
                return this.HighestBidderIdField;
            }
            set
            {
                this.HighestBidderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuctionServiceReference.IAuctionService")]
    public interface IAuctionService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Register", ReplyAction="http://tempuri.org/IAuctionService/RegisterResponse")]
        void Register(int id, string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Register", ReplyAction="http://tempuri.org/IAuctionService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(int id, string name, string surname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/GetCurrentExponatResponse")]
        AuctionServiceReference.Exponat GetCurrentExponat();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/GetCurrentExponatResponse")]
        System.Threading.Tasks.Task<AuctionServiceReference.Exponat> GetCurrentExponatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GiveUpOnCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/GiveUpOnCurrentExponatResponse")]
        void GiveUpOnCurrentExponat(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GiveUpOnCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/GiveUpOnCurrentExponatResponse")]
        System.Threading.Tasks.Task GiveUpOnCurrentExponatAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/BidOnCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/BidOnCurrentExponatResponse")]
        void BidOnCurrentExponat(int clientId, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/BidOnCurrentExponat", ReplyAction="http://tempuri.org/IAuctionService/BidOnCurrentExponatResponse")]
        System.Threading.Tasks.Task BidOnCurrentExponatAsync(int clientId, double amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAuctionServiceChannel : AuctionServiceReference.IAuctionService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AuctionServiceClient : System.ServiceModel.ClientBase<AuctionServiceReference.IAuctionService>, AuctionServiceReference.IAuctionService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuctionServiceClient() : 
                base(AuctionServiceClient.GetDefaultBinding(), AuctionServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAuctionService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuctionServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AuctionServiceClient.GetBindingForEndpoint(endpointConfiguration), AuctionServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuctionServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuctionServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuctionServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuctionServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuctionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void Register(int id, string name, string surname)
        {
            base.Channel.Register(id, name, surname);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(int id, string name, string surname)
        {
            return base.Channel.RegisterAsync(id, name, surname);
        }
        
        public AuctionServiceReference.Exponat GetCurrentExponat()
        {
            return base.Channel.GetCurrentExponat();
        }
        
        public System.Threading.Tasks.Task<AuctionServiceReference.Exponat> GetCurrentExponatAsync()
        {
            return base.Channel.GetCurrentExponatAsync();
        }
        
        public void GiveUpOnCurrentExponat(int clientId)
        {
            base.Channel.GiveUpOnCurrentExponat(clientId);
        }
        
        public System.Threading.Tasks.Task GiveUpOnCurrentExponatAsync(int clientId)
        {
            return base.Channel.GiveUpOnCurrentExponatAsync(clientId);
        }
        
        public void BidOnCurrentExponat(int clientId, double amount)
        {
            base.Channel.BidOnCurrentExponat(clientId, amount);
        }
        
        public System.Threading.Tasks.Task BidOnCurrentExponatAsync(int clientId, double amount)
        {
            return base.Channel.BidOnCurrentExponatAsync(clientId, amount);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAuctionService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAuctionService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:54872/AuctionService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuctionServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAuctionService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuctionServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAuctionService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAuctionService,
        }
    }
}
