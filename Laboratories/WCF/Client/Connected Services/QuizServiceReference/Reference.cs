//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuizServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
    public partial class Question : object
    {
        
        private bool AnswerField;
        
        private int IdField;
        
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Answer
        {
            get
            {
                return this.AnswerField;
            }
            set
            {
                this.AnswerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text
        {
            get
            {
                return this.TextField;
            }
            set
            {
                this.TextField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuizServiceReference.IQuizService")]
    public interface IQuizService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/AddQuestion", ReplyAction="http://tempuri.org/IQuizService/AddQuestionResponse")]
        void AddQuestion(QuizServiceReference.Question q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/AddQuestion", ReplyAction="http://tempuri.org/IQuizService/AddQuestionResponse")]
        System.Threading.Tasks.Task AddQuestionAsync(QuizServiceReference.Question q);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/GetQuestions", ReplyAction="http://tempuri.org/IQuizService/GetQuestionsResponse")]
        System.Collections.Generic.Dictionary<int, QuizServiceReference.Question> GetQuestions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/GetQuestions", ReplyAction="http://tempuri.org/IQuizService/GetQuestionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, QuizServiceReference.Question>> GetQuestionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/ModifyQuestionText", ReplyAction="http://tempuri.org/IQuizService/ModifyQuestionTextResponse")]
        void ModifyQuestionText(int questionId, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/ModifyQuestionText", ReplyAction="http://tempuri.org/IQuizService/ModifyQuestionTextResponse")]
        System.Threading.Tasks.Task ModifyQuestionTextAsync(int questionId, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/ModifyQuestionAnswer", ReplyAction="http://tempuri.org/IQuizService/ModifyQuestionAnswerResponse")]
        void ModifyQuestionAnswer(int questionId, bool answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuizService/ModifyQuestionAnswer", ReplyAction="http://tempuri.org/IQuizService/ModifyQuestionAnswerResponse")]
        System.Threading.Tasks.Task ModifyQuestionAnswerAsync(int questionId, bool answer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IQuizServiceChannel : QuizServiceReference.IQuizService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class QuizServiceClient : System.ServiceModel.ClientBase<QuizServiceReference.IQuizService>, QuizServiceReference.IQuizService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public QuizServiceClient() : 
                base(QuizServiceClient.GetDefaultBinding(), QuizServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IQuizService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuizServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(QuizServiceClient.GetBindingForEndpoint(endpointConfiguration), QuizServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuizServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(QuizServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuizServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(QuizServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuizServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void AddQuestion(QuizServiceReference.Question q)
        {
            base.Channel.AddQuestion(q);
        }
        
        public System.Threading.Tasks.Task AddQuestionAsync(QuizServiceReference.Question q)
        {
            return base.Channel.AddQuestionAsync(q);
        }
        
        public System.Collections.Generic.Dictionary<int, QuizServiceReference.Question> GetQuestions()
        {
            return base.Channel.GetQuestions();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, QuizServiceReference.Question>> GetQuestionsAsync()
        {
            return base.Channel.GetQuestionsAsync();
        }
        
        public void ModifyQuestionText(int questionId, string text)
        {
            base.Channel.ModifyQuestionText(questionId, text);
        }
        
        public System.Threading.Tasks.Task ModifyQuestionTextAsync(int questionId, string text)
        {
            return base.Channel.ModifyQuestionTextAsync(questionId, text);
        }
        
        public void ModifyQuestionAnswer(int questionId, bool answer)
        {
            base.Channel.ModifyQuestionAnswer(questionId, answer);
        }
        
        public System.Threading.Tasks.Task ModifyQuestionAnswerAsync(int questionId, bool answer)
        {
            return base.Channel.ModifyQuestionAnswerAsync(questionId, answer);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IQuizService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IQuizService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:54872/QuizService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return QuizServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IQuizService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return QuizServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IQuizService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IQuizService,
        }
    }
}
